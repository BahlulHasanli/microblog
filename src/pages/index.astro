---
import BaseLayout from "@/layouts/BaseLayout.astro";
import BlogEntries from "@/components/entries/BlogEntry.astro";
import { getCollection } from "astro:content";
import Slider from "@/components/entries/HomeSlider.astro";
import { categories, slugifyCategory } from "@/data/categories";

const allPosts = (await getCollection("posts"));
// Sort posts by date in descending order (newest first)
const sortedPosts = allPosts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<BaseLayout>
  <section> 
    <Slider />
    <div class="py-18 max-w-3xl mx-auto">
      <div class="mb-12">
        <ul class="flex justify-between w-full mb-15">
          <li data-tab="weekly" class="cursor-pointer text-4xl text-balance font-light font-display text-slate-900 max-w-60 transition-colors duration-200">
            <div class="font-big-shoulders">99'un</div> <div class="font-semibold">həftəbecəri</div>
          </li>
          <li data-tab="window" class="cursor-pointer text-center text-4xl text-balance font-light font-display text-slate-200 max-w-60 transition-colors duration-200">
            <div class="font-big-shoulders">99'un</div> <div class="font-semibold">pəncərəsi</div>
          </li>
          <li data-tab="gossip" class="cursor-pointer text-4xl text-right text-balance font-light font-display text-slate-200 max-w-60 transition-colors duration-200">
            <div class="font-big-shoulders">99'un</div> <div class="font-semibold">dedi-qodusu</div>
          </li>
        </ul>

      <div class="tab-panels mt-4">
        <div id="weekly" class="tab-content block">
          <div class="flex flex-wrap gap-3 mt-8 mb-4">
            {
              categories.map((category) => (
                <a
                  class="hover:text-rose-500 text-sm font-medium text-base-600"
                  href={`/category/${slugifyCategory(category)}`}
                >
                  {category}
                </a>
              ))
            }
          </div>
          <div class="grid grid-cols-1 gap-8 gap-y-24 sm:grid-cols-2">
            {
              sortedPosts.slice(0, 10).map((post) => (
                <BlogEntries
                  url={"/posts/" + post.slug}
                  alt={post.data.title}
                  categories={post.data.categories}
                  title={post.data.title}
                  author={post.data.author}
                  image={post.data.image.url}
                  description={post.data.description}
                  pubDate={post.data.pubDate.toString()}
                />
              ))
            }
          </div>
        </div>

        <div id="window" class="tab-content hidden">
          <div class="grid grid-cols-1 gap-8 gap-y-24 sm:grid-cols-2">
            coming soon!
          </div>
        </div>

        <div id="gossip" class="tab-content hidden">
          <div class="grid grid-cols-1 gap-8 gap-y-24 sm:grid-cols-2">
            coming soon!
          </div>
        </div>
      </div>
     </div>
    </div>
  </section>

<script>
  document.addEventListener('astro:page-load', () => {
    const tabs = document.querySelectorAll('[data-tab]');
    const contents = document.querySelectorAll('.tab-content');
    let activeTabId = 'weekly';

    function switchTab(targetId: string) {
      activeTabId = targetId;
      updateTabStyles(targetId);
      updateTabContent(targetId);
    }
 
    function updateTabStyles(targetId: string) {
      tabs.forEach(t => {
        if (t.getAttribute('data-tab') === targetId) {
          t.classList.remove('text-slate-200');
          t.classList.add('text-slate-900');
        } else {
          t.classList.remove('text-slate-900');
          t.classList.add('text-slate-200'); 
        }
      });
    }

    function updateTabContent(targetId: string) {
      contents.forEach(content => {
        if (content.id === targetId) {
          content.classList.remove('hidden');
          content.classList.add('block');
        } else {
          content.classList.remove('block');
          content.classList.add('hidden');
        }
      });
    }

    // Handle hover effects
    tabs.forEach(tab => {
      tab.addEventListener('mouseenter', () => {
        const targetId = tab.getAttribute('data-tab');
        updateTabStyles(targetId);
      });

      tab.addEventListener('mouseleave', () => {
        updateTabStyles(activeTabId);
      });
    });

    // Handle click events
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const targetId = tab.getAttribute('data-tab');
        switchTab(targetId);
      });
    });

    // Initialize first tab
    switchTab('weekly');
  });
</script>

</BaseLayout>
